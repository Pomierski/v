export class Binding {
  constructor(t, e) {
    (this._state = t), (this._setter = e), (this._prop = "");
  }
  hasStateElement(t) {
    for (const e in this._state._bindings) if (e instanceof t) return !0;
    return !1;
  }
  hasElementSelf() {
    for (const t in this._state._bindings)
      return this._state._bindings.get(t).includes(this);
  }
  addSelfToElement(t) {
    this.hasElementSelf(t) ||
      (this._state._bindings.get(t).push(this), this._state.update());
  }
  set(t, e) {
    if (this._prop.includes(".")) {
      const s = this._prop.split(".");
      e[s[0]][s[1]] = t;
    } else e[this._prop] = this._setter(t);
  }
}
export class State {
  constructor(t) {
    (this._value = null), (this._bindings = new Map()), (this.value = t);
  }
  update() {
    for (const t of this._bindings)
      for (const e of t[1]) e.set(this.value, t[0]);
  }
  set value(t) {
    (this._value = t), this.update();
  }
  get value() {
    return this._value;
  }
  bind(t = (t) => t) {
    return new Binding(this, t);
  }
}
export const valueOf = (t) => new State(t);
export class ListBinding extends Binding {
  constructor(t, e) {
    super(t, (t) => t), (this._each = e);
  }
  requestViewUpdate() {
    const t = [];
    for (const e of this._state.value) t.push(e);
    for (const e of this._state._listBindings)
      if (e[1] === this)
        for (let s = 0; s < t.length; s++)
          e[0].appendChild(this._each(t[s][1], t[s][0]));
  }
}
export class ListState extends State {
  constructor(...t) {
    super(new Map()), (this._idIncrement = 0), (this._listBindings = new Map());
    for (const e of t) this.add(e);
  }
  requestViewUpdate() {
    for (const t of this._listBindings)
      t[0].appendChild(
        t[1]._each(this.value.get(this._idIncrement), this._idIncrement)
      );
  }
  add(t) {
    this.set(++this._idIncrement, t), this.requestViewUpdate();
  }
  set(t, e) {
    this.value.set(t, e);
  }
  get(t) {
    this._value.get(t);
  }
  remove(t) {
    let e = [];
    for (const t of this.value) e.push(t[0]);
    for (let s = 0; s < e.length; s++)
      if (e[s] === t) {
        for (const e of this._listBindings)
          this.value.delete(t), e[0].removeChild(e[0].children.item(s));
        break;
      }
    0 === this.value.size && (this._idIncrement = 0);
  }
  pop() {
    this.remove(this._idIncrement);
  }
  bindEach(t = (t, e) => t) {
    return new ListBinding(this, t);
  }
}
export const listOf = (...t) => new ListState(...t);
export const $ = (e = "div", s = {}, i = []) => {
  const n = e.split(".");
  let o = n[0];
  if ((n.splice(0, 1), o.includes("#"))) {
    const t = o.split("#");
    "" === t[0] ? (o = "div") : ((o = t[0]), (s.id = t[1]));
  }
  s.className = s.className ?? [];
  for (const t of n) t.includes("#") || s.className.push(t);
  (s.className = s.className.join(" ")),
    "" === s.className && delete s.className;
  const a = document.createElement(o);
  for (const e in s)
    if (s[e] instanceof Binding) t(s[e], a, e);
    else if ("style" === e && "object" == typeof s[e]) {
      const i = s[e];
      for (const n in i)
        i[n] instanceof Binding ? t(s[e][n], a, `${e}.${n}`) : (a[e][n] = i[n]);
    } else s[e] instanceof Binding || (a[e] = s[e]);
  if (i instanceof ListBinding)
    i._state._listBindings.set(a, i), i.requestViewUpdate();
  else
    for (const e of i)
      if (e instanceof HTMLElement) a.appendChild(e);
      else {
        const s = document.createTextNode(e);
        a.appendChild(s), e instanceof Binding && t(e, s, "textContent");
      }
  return a;
};
const t = (t, e, s) => {
  t.hasStateElement(e) || (t._state._bindings.set(e, []), (t._prop = s)),
    t.addSelfToElement(e);
};
